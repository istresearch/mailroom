package resumes_test

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"sort"
	"testing"
	"time"

	"github.com/nyaruka/goflow/assets"
	"github.com/nyaruka/goflow/assets/static"
	"github.com/nyaruka/goflow/envs"
	"github.com/nyaruka/goflow/flows"
	"github.com/nyaruka/goflow/flows/engine"
	"github.com/nyaruka/goflow/flows/resumes"
	"github.com/nyaruka/goflow/flows/triggers"
	"github.com/nyaruka/goflow/test"
	"github.com/nyaruka/goflow/utils/dates"
	"github.com/nyaruka/goflow/utils/jsonx"
	"github.com/nyaruka/goflow/utils/uuids"

	"github.com/pkg/errors"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestResumeTypes(t *testing.T) {
	assetsJSON, err := ioutil.ReadFile("testdata/_assets.json")
	require.NoError(t, err)

	typeNames := make([]string, 0)
	for typeName := range resumes.RegisteredTypes() {
		typeNames = append(typeNames, typeName)
	}

	sort.Strings(typeNames)

	for _, typeName := range typeNames {
		testResumeType(t, assetsJSON, typeName)
	}
}

func testResumeType(t *testing.T, assetsJSON json.RawMessage, typeName string) {
	testFile, err := ioutil.ReadFile(fmt.Sprintf("testdata/%s.json", typeName))
	require.NoError(t, err)

	tests := []struct {
		Description   string              `json:"description"`
		Resume        json.RawMessage     `json:"resume"`
		ReadError     string              `json:"read_error"`
		Events        []json.RawMessage   `json:"events"`
		RunStatus     flows.RunStatus     `json:"run_status"`
		SessionStatus flows.SessionStatus `json:"session_status"`
	}{}

	err = jsonx.Unmarshal(testFile, &tests)
	require.NoError(t, err)

	defer dates.SetNowSource(dates.DefaultNowSource)
	defer uuids.SetGenerator(uuids.DefaultGenerator)

	for _, tc := range tests {
		dates.SetNowSource(dates.NewFixedNowSource(time.Date(2018, 10, 18, 14, 20, 30, 123456, time.UTC)))
		uuids.SetGenerator(uuids.NewSeededGenerator(12345))

		testName := fmt.Sprintf("test '%s' for resume type '%s'", tc.Description, typeName)

		// create session assets
		sa, err := test.CreateSessionAssets(assetsJSON, "")
		require.NoError(t, err, "unable to create session assets in %s", testName)

		resume, err := resumes.ReadResume(sa, tc.Resume, assets.PanicOnMissing)

		if tc.ReadError != "" {
			rootErr := errors.Cause(err)
			assert.EqualError(t, rootErr, tc.ReadError, "read error mismatch in %s", testName)
			continue
		} else {
			assert.NoError(t, err, "unexpected read error in %s", testName)
		}

		flow, err := sa.Flows().Get(assets.FlowUUID("ed352c17-191e-4e75-b366-1b2c54bb32d8"))
		require.NoError(t, err)

		// start a waiting session
		env := envs.NewBuilder().Build()
		eng := engine.NewBuilder().Build()
		contact := flows.NewEmptyContact(sa, "Bob", envs.Language("eng"), nil)
		trigger := triggers.NewManual(env, flow.Reference(), contact, false, nil)
		session, _, err := eng.NewSession(sa, trigger)
		require.NoError(t, err)
		require.Equal(t, flows.SessionStatusWaiting, session.Status())

		// resume with our resume...
		sprint, err := session.Resume(resume)

		// check statuses
		assert.Equal(t, tc.RunStatus, session.Runs()[0].Status(), "run status mismatch in %s", testName)
		assert.Equal(t, tc.SessionStatus, session.Status(), "session status mismatch in %s", testName)

		// check events generated by resume
		actualEventsJSON, _ := jsonx.Marshal(sprint.Events())
		expectedEventsJSON, _ := jsonx.Marshal(tc.Events)
		test.AssertEqualJSON(t, expectedEventsJSON, actualEventsJSON, "events mismatch in %s", testName)

		// try marshaling the resume back to JSON
		resumeJSON, err := jsonx.Marshal(resume)
		test.AssertEqualJSON(t, tc.Resume, resumeJSON, "marshal mismatch in %s", testName)
	}
}

func TestReadResume(t *testing.T) {
	env := envs.NewBuilder().Build()

	missingAssets := make([]assets.Reference, 0)
	missing := func(a assets.Reference, err error) { missingAssets = append(missingAssets, a) }

	sessionAssets, err := engine.NewSessionAssets(env, static.NewEmptySource(), nil)
	require.NoError(t, err)

	// error if no type field
	_, err = resumes.ReadResume(sessionAssets, []byte(`{"foo": "bar"}`), missing)
	assert.EqualError(t, err, "field 'type' is required")

	// error if we don't recognize action type
	_, err = resumes.ReadResume(sessionAssets, []byte(`{"type": "do_the_foo", "foo": "bar"}`), missing)
	assert.EqualError(t, err, "unknown type: 'do_the_foo'")
}
