package docs

import (
	"fmt"
	"os"
	"path"

	"github.com/nyaruka/goflow/utils/dates"
	"github.com/nyaruka/goflow/utils/i18n"

	"github.com/pkg/errors"
)

const (
	// documentation extracted from the source code is in this language
	srcLanguage = "en_US"
	poDomain    = "flows"
)

// Generator generates a documentation output
type Generator interface {
	Name() string

	// Generate does the actual generation in the given language
	Generate(baseDir, outputDir string, items map[string][]*TaggedItem, gettext func(string) string) error
}

var generators []Generator

// RegisterGenerator registers a documentation generator
func RegisterGenerator(g Generator) {
	generators = append(generators, g)
}

// Generate generates all documentation outputs
func Generate(baseDir, outputDir, localesDir string) error {
	fmt.Println("Processing sources...")

	// extract all documented items from the source code
	taggedItems, err := FindAllTaggedItems(baseDir)
	if err != nil {
		return errors.Wrap(err, "error extracting tagged items")
	}

	for k, v := range taggedItems {
		fmt.Printf(" > Found %d tagged items with tag %s\n", len(v), k)
	}

	locales := i18n.NewLibrary(localesDir, srcLanguage)

	// keep track of all unique strings we look up via gettext
	msgIDs := make(map[string]bool)
	msgUsed := func(msg string) {
		msgIDs[msg] = true
	}

	// generate docs in each supported language
	for _, language := range locales.Languages() {
		err := generateForLang(baseDir, outputDir, taggedItems, locales, language, msgUsed)
		if err != nil {
			return err
		}
	}

	// use the unique messages set to create a new POT file
	pot := i18n.NewPO(i18n.NewPOHeader("Generated by goflow docgen", dates.Now(), srcLanguage))
	for msgID := range msgIDs {
		pot.AddEntry(&i18n.POEntry{MsgID: msgID})
	}
	pot.Sort()

	// and merge with existing locale files
	if err := locales.Update(poDomain, pot); err != nil {
		return errors.Wrap(err, "error updating locale files")
	}

	return nil
}

// generates all documentation a given language by invoking all generators
func generateForLang(baseDir, outputDir string, items map[string][]*TaggedItem, locales *i18n.Library, language string, msgUsed func(string)) error {
	fmt.Printf("Generating docs in '%s'\n", language)

	// create language specific output directory
	genDir := path.Join(outputDir, language)
	os.MkdirAll(genDir, 0777)

	// load PO file for translations
	po, err := locales.Load(language, poDomain)
	if err != nil {
		return errors.Wrapf(err, "error loading PO file for '%s'", language)
	}

	// create gettext function which will keep track of all unique message IDs
	gettext := func(msg string) string {
		if msg != "" {
			msgUsed(msg)
			return po.GetText("", msg)
		}
		return ""
	}

	for _, g := range generators {
		fmt.Printf("Invoking generator: %s...\n", g.Name())

		if err := g.Generate(baseDir, genDir, items, gettext); err != nil {
			return errors.Wrapf(err, "error invoking generator %s", g.Name())
		}
	}

	return nil
}
